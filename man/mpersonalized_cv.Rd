% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mpersonalized_cv.R
\name{mpersonalized_cv}
\alias{mpersonalized_cv}
\title{Cross Validation for \code{mpersonalized}}
\usage{
mpersonalized_cv(
  problem = c("meta-analysis", "multiple outcomes"),
  X,
  Trt,
  P = NULL,
  Xlist,
  Ylist,
  Trtlist,
  Plist = replicate(length(Xlist), NULL, simplify = FALSE),
  typelist = replicate(length(Xlist), "continuous", simplify = FALSE),
  penalty = c("lasso", "GL", "SGL", "fused", "lasso+fused", "GL+fused", "SGL+fused",
    "SGL+SL"),
  surrogate = c("squared_error", "logistic"),
  standardize = TRUE,
  lambda1 = NULL,
  lambda2 = NULL,
  tau0 = NULL,
  single_rule_lambda = NULL,
  num_lambda1 = ifelse(!is.null(lambda1), length(lambda1), 10),
  num_lambda2 = ifelse(!is.null(lambda2), length(lambda2), 10),
  num_tau0 = ifelse(!is.null(tau0), length(tau0), 11),
  min_tau = 0.01,
  num_single_rule_lambda = ifelse(!is.null(single_rule_lambda),
    length(single_rule_lambda), 50),
  alpha = NULL,
  single_rule = FALSE,
  cv_folds = 5,
  admm_control = NULL,
  joint_contrast = FALSE,
  contrast_builder_control = NULL
)
}
\arguments{
\item{problem}{A character string specifiy whether user want to solve "meta-analysis" or
"multiple outcomes" problem. For \code{problem = "meta-analysis"}, user should also supply
\code{Xlist}, \code{Ylist}, \code{Trtlist}. For \code{problem = "multiple outcomes"},
user should supply \code{X}, \code{Ylist}, \code{Trt}.}

\item{X}{Covariate matrix that should be supplied when \code{problem = "multiple outcomes"}
with rows indicating subjects and columns indicating covariates.}

\item{Trt}{Treatment vector that should be supplied when \code{problem = "multiple outcomes"},
which should be coded as 0 or 1.}

\item{P}{Propensity score vector when \code{problem = "multiple outcomes"}. If not supplied,
then study is treated as randomized trial and the propensity score is estimated as the proportion
of 1's in \code{Trt} for every subject.}

\item{Xlist}{A list object that should be supplied when \code{problem = "meta-analysis"},
with \eqn{k}th element denoting the covariate matrix of study \eqn{k}.}

\item{Ylist}{When \code{problem = "meta-analysis"}, \code{Ylist} should be a list object with \eqn{k}th element
denoting the response vector of study \eqn{k}. When \code{problem = "multiple outcomes"}, \code{Ylist} should
be a list object with \eqn{k}th element denoting the \eqn{k}th outcome.}

\item{Trtlist}{A list object that should be supplied when \code{problem = "meta-analysis"},
with \eqn{k}th element denoting the treatment vector of study \eqn{k} (coded as 0 or 1).}

\item{Plist}{A list object that should be supplied when \code{problem = "meta-analysis"},
with \eqn{k}the element denoting the propensity score vector of study \eqn{k}.
If not supplied, then each study is treated as randomized trial and the corresponding propensity score
is estimated as the proportion of 1's in the \eqn{k}th element of \code{Trtlist} for all subjects.}

\item{typelist}{A list object with \eqn{k}th element denoting the type of outcome corresponding
to the \eqn{k}th element in \code{Ylist}. Each element could be "continuous" or "binary".}

\item{penalty}{For different rules, the penalty could be "lasso", "GL", "SGL", "fused",
"lasso+fused", "GL+fused", "SGL+fused", or "SGL+SL". For single rule, the penalty could only be "lasso".
For \code{penalty = "none"}, use function \code{mpersonalized} instead.
User should always input \code{penalty} and then supply correponding penalty parameters sequence
if needed.}

\item{lambda1}{\eqn{\lambda_1} in the framework of different rules. If not supplied, a default
sequence will be computed.}

\item{lambda2}{\eqn{\lambda_2} in the framework of different rules. If not supplied, a default
sequence will be computed.}

\item{tau0}{Parameter \eqn{\tau_0} for the \code{"SGL+SL"} penalty in the framework of different rules.
If not supplied, a default sequence will be computed.}

\item{single_rule_lambda}{\eqn{\lambda_{single}} in the framework of single rule.}

\item{num_lambda1}{If \code{lambda1} is not specified by user, user could still specify the length of the
\code{lambda1} sequence. The default length is 10.}

\item{num_lambda2}{If \code{lambda2} is not specified by user, user could still specify the length of the
\code{lambda2} sequence. The default length is 10.}

\item{num_tau0}{If \code{tau0} is not specified by user, the user can still specify the length of the
\code{tau0} sequence. The default length is 11.}

\item{min_tau}{If \code{tau0} is not specified by user, \code{min_tau} specifies the minimum value
for \eqn{\tau_0}. The largest value for \eqn{\tau_0} will be \code{1 / min_tau}.}

\item{num_single_rule_lambda}{If \code{single_rule_lambda} is not specified, user could still specify the length
of the \code{single_rule_lambda} sequence. The default length is 50.}

\item{alpha}{\eqn{\alpha} in the framework of different rules. If not supplied, a default value
will be used depending on \code{penalty}.}

\item{single_rule}{A logical value, whether the single treatment framework is used. Deafult is \code{FALSE}.}

\item{cv_folds}{Number of folds needed for cross-validation. Default is 5}

\item{admm_control}{A list of parameters which user can specify to control the admm algorithm.
In \code{admm_control}, the following parameters can be supplied:
\code{abs.tol}, absolute tolerance; \code{rel.tol}, relative tolerance; \code{maxit}, maximum number of iterations;
\code{rho}, Lagrangian parameter.}

\item{joint_contrast}{Should the contrast function be fit jointly? \code{TRUE} or \code{FALSE}}

\item{contrast_builder_control}{A list of parameters which user can specify to control estimation of
contrast function. In \code{contrast_builder_control},
the following parameters could be supplied: \code{eff_aug}, a logical value whether efficiency augmentation
should be implemented; \code{response_model}, a character string specify what outcome model to use
if \code{eff_aug = TRUE}, \code{response_model} could be "lasso", "linear", or "randomForest";
\code{contrast_builder_folds}, the number of folds used in cross validation when \code{response_model = "lasso"}.}
}
\value{
An S3 object of class "mp_cv", which contains the information of the model with the optimal lambda. It can be supplied
to some other functions in mperosnalized package for further analysis or prediction.

\item{penalty_parameter_sequence}{A matrix object with each row denoting a configuration of the penalty parameters.}
\item{opt_penalty_parameter}{Optimal penalty parameter chosen by minimizing the cross validation error.}
\item{intercept}{The vector of intercepts corresponding to the optimal penalty parameter.}
\item{beta}{The coefficient matrix corresponding to the optimal penalty parameter.}
\item{number_covariates}{Number of candidate covariates considered.}
\item{number_studies_or_outcomes}{Number of studies if \code{problem = "meta-analysis"} or number of outcomes if \code{problem = "multiple outcomes"}.}
}
\description{
This function implments \code{mpersonalized} and use cross validatation to tune penalty parameter.
 The optimal penalty parameter is selected by minimizing \deqn{\sum_{i=1}^{n_k}\frac{|\hat{C}_k(X_{i})|}{\sum_{i=1}^{n_k}|\hat{C}_k(X_{i})|}\bigl [1\{\hat{C}_k(X_{i})>0\}-g_k(X_{i})\bigr]^2}
 in the leave-out fold, where \eqn{\hat{C}_k(X_{i})} in the leave-out fold is independently estimated from the training set.
}
\examples{
set.seed(123)
sim_dat = simulated_dataset(n = 200, problem = "meta-analysis")
Xlist = sim_dat$Xlist; Ylist = sim_dat$Ylist; Trtlist = sim_dat$Trtlist

# fit different rules with group lasso penalty
mp_cvmod_diff = mpersonalized_cv(problem = "meta-analysis",
                                 Xlist = Xlist, Ylist = Ylist, Trtlist = Trtlist,
                                 penalty = "GL", single_rule = FALSE)

mp_cvmod_diff$intercept
mp_cvmod_diff$beta

# fit a single rule with lasso penalty
mp_cvmod_single = mpersonalized_cv(problem = "meta-analysis",
                                   Xlist = Xlist, Ylist = Ylist, Trtlist = Trtlist,
                                   penalty = "lasso", single_rule = TRUE)

mp_cvmod_single$intercept
mp_cvmod_single$beta
set.seed(NULL)
}
